

What happens when you initialize a repository? Why do you need to do it?
Ans. git init create a empty repository which contains no commit and turns a repository into git repository so that we can start tracking files.


How is the staging area different from the working directory and the repository? What value do you think it offers?
Ans.Staging area is the preparation area for files to be committed. Only files in this area are going to be included in the commit executed next time. It helps to divide changes in the working directory into several commits, each of which consists of a group of changes that represent a logical change to the relevant files.


How can you use the staging area to make sure you have one commit per logical change?
Ans. Only files in this area are going to be included in the commit executed next time. It helps to divide changes in the working directory into several commits, each of which consists of a group of changes that represent a logical change to the relevant files.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Ans. As described in the lesson, branches are useful for when you have working code and want to try a variation in functionality without breaking what you
currently have. By branching you create a copy of the master (or wherever the head is) and then "branch off" at that point. The main branch stays 
intact and unchanged, but you are free to make any changes to the new branch.

How do the diagrams help you visualize the branch structure?
Ans. With using git log --graph (possibly with --oneline) [branch names...], you can easily tell how the whole branch structure was developed and at which point each branch was actually created. That would give you the overview of the whole structure of the project you are working on, so that you can tell what you are specifically focusing on and when and which branch to merge your work.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Ans. All the commits in the second branch is merged into the first branch, and the resluting merge commit becomes the new head of your current branch. The diagram shown by git log --graph cleary shows the merged commit has two parents, which correspond to the prior heads of each merged branch.